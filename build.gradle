plugins {
  id 'application'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.5'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.3.1.5724'
  // Applies analysis tools including checkstyle and OWASP Dependency checker.
  id 'uk.gov.hmcts.java' version '0.12.67'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs.addAll(["-Xlint:unchecked", "-Werror"])
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher = javaToolchains.launcherFor(java.toolchain)
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

    // Force tests to run even if up-to-date
  outputs.upToDateWhen { false }

  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    exceptionFormat = 'full'
    showExceptions = true
    showCauses = true
    showStackTraces = true
  }
}

test {
  failFast = true
}

tasks.register("functional", Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.register("integration", Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

tasks.register("smoke", Test) {
  description = "Runs Smoke Tests"
  group = "Verification"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

jacocoTestReport {
  executionData.setFrom(files(test, integration))
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks.named("sonarqube").configure {
  dependsOn jacocoTestReport
}
project.tasks.named("check").configure {
  dependsOn integration
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: test-backend"
    property "sonar.projectKey", "uk.gov.hmcts.reform:test-backend"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection ->
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = file('config/owasp/suppressions.xml')
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url = 'https://jitpack.io' }
}

ext {
  log4JVersion = "2.25.1"
  logbackVersion = "1.5.18"
}

ext['snakeyaml.version'] = '2.2'

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.13'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.9'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
  implementation group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion

  implementation group: 'io.rest-assured', name: 'rest-assured'
  implementation group: 'org.projectlombok', name: 'lombok'
  annotationProcessor 'org.projectlombok:lombok'

  testImplementation(platform('org.junit:junit-bom:5.13.4'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  runtimeOnly 'com.h2database:h2' // for testing
  // or runtimeOnly 'org.postgresql:postgresql' // for production
}

application {
  mainClass = 'uk.gov.hmcts.reform.dev.Application'
}

bootJar {
  archiveFileName = "test-backend.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

checkstyle {
  ignoreFailures = true
}